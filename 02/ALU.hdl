// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
        // Operand input
        // Begin zx/zy stage
        Not(in=zx, out=x1);
        Not(in=zy, out=y1);
        And16(
            a[0]=x1, 
            a[1]=x1, 
            a[2]=x1, 
            a[3]=x1, 
            a[4]=x1, 
            a[5]=x1, 
            a[6]=x1, 
            a[7]=x1, 
            a[8]=x1, 
            a[9]=x1, 
            a[10]=x1, 
            a[11]=x1, 
            a[12]=x1, 
            a[13]=x1, 
            a[14]=x1, 
            a[15]=x1, 
            b=x, 
            out=x2
        );
        And16(
            a[0]=y1, 
            a[1]=y1, 
            a[2]=y1, 
            a[3]=y1, 
            a[4]=y1, 
            a[5]=y1, 
            a[6]=y1, 
            a[7]=y1, 
            a[8]=y1, 
            a[9]=y1, 
            a[10]=y1, 
            a[11]=y1, 
            a[12]=y1, 
            a[13]=y1, 
            a[14]=y1, 
            a[15]=y1, 
            b=y, 
            out=y2
        );
        // End zx/zy stage

        // Begin nx/ny stage
        Not16(in=x2, out=x3);
        Not16(in=y2, out=y3);
        Mux16(a=x2, b=x3, sel=nx, out=rx);
        Mux16(a=y2, b=y3, sel=ny, out=ry);
        // End nx/ny stage


        // Begin function (add/and) stage
        Add16(a=rx, b=ry, out=addout);
        And16(a=rx, b=ry, out=andout);
        Mux16(a=andout, b=addout, sel=f, out=fr);
        // End function (add/and) stage

        // Begin negate output stage
        Not16(in=fr, out=ifr1);
        Mux16(
            a=fr, 
            b=ifr1, 
            sel=no,
            out[0..7]=preout1, 
            out[8..14]=preout2,
            out[15]=negbit
        );
        // End negate output stage

        // Begin detect zero stage
        Or8Way(
            in=preout1, 
            out=zo1
        );
        Or8Way(
            in[0..6]=preout2,
            in[7]=negbit, 
            out=zo2
        );
        Or(a=zo1, b=zo2, out=zo3);
        Not(in=zo3, out=zr);
        // End detect zero stage

        // Begin detect negative stage
        Or(a=negbit, out=ng);
        // End detect negative stage

        // Begin output stage
        Or16(
            b[0..7]=preout1, 
            b[8..14]=preout2,
            b[15]=negbit,
            out=out
        );
        // End output stage


}